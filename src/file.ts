import camelcase from "camelcase";
import { Config } from "tailwindcss-won";

// "open" and "close" will be defined later to preserve whitespace
const base: { open: string, close: string } = { open: "", close: "" };

const twClass = "Tailwind";

base.open = `// Code generated by github.com/ratorx/typed.tw
package css

// Remember to change the unsafe pointer cast
type Class = string

const (
`;

base.close = "\n)\n";

const replaceNegative = (config: Config, key: string, value: string): string => {
  if (value.startsWith("-")) { return `neg-${key}`; }
	return key.replace(`${config.separator || ":"}-`, '-neg-');
};

// This works like toCamelCase, with a "minus" special case:
//   value            key
// - "text-primary":  "TextPrimary"
// - "m-4":           "M4"
// - "-m-4":          "NegM4"
// - "sm:-m-4":       "SmNegM4"
const toKey = (config: Config, value: string): string => {
  let key = value;
  key = config.prefix ? key.replace(config.prefix, "") : key;
  key = key.split("/").join("d");
  key = replaceNegative(config, key, value);
  key = key.replace(/\W/g, '-'); // separator maybe
  key = camelcase(key, {pascalCase: true});
  return key;
};

// input: text-red-4
// output: TextRed4 = "text-red-4"
const getMethod = (config: Config) => (cls: string): string => (
  // `  ${toKey(config, cls)}(): ${twClass} { return this.add("${cls}"); }`
  `  ${toKey(config, cls)} Class = "${cls}"`
);

export const getFile = (config: Config) => (classes: string[]): string => {
  const body = classes.map(getMethod(config)).join("\n");
  return `${base.open}${body}${base.close}`;
};
